enum Gender {
  male
  female
}

type Lesson {
  id: ID
  name: String
  principles: [Principle]
  activePrinciples: [Principle]
}

type LessonConnection {
  items: [Lesson]
  nextToken: String
}

type MultipleChoiceOption {
  id: ID
  text: String
}

type Mutation {
  addPrinciple(name: String!, lessonId: ID): Principle
  addLesson(name: String!): Lesson
  updatePrinciple(id: ID!, updates: PrincipleUpdates!): Principle
}

type Principle {
  id: ID
  lessonId: ID
  name: String
  doctrineMarkdown: String
  teachingMarkdown: String
  pointsToTeachMarkdown: String
  videoRefs: [VideoRef]
  scriptureGroups: [ScriptureGroup]
  reflectPrompts: [String]
  enabled: Int
}

type PrincipleStatus {
  principleId: String
  health: Int
}

input PrincipleUpdates {
  name: String
  enabled: Int
  doctrineMarkdown: String
  teachingMarkdown: String
  pointsToTeachMarkdown: String
  reflectPrompts: [String]
  videoRefs: [VideoRefInput]
  scriptureGroups: [ScriptureGroupInput]
}

type Query {
  allLessons: [Lesson]
  getLesson(id: ID!): Lesson
  listLessons(first: Int, after: String): LessonConnection
}

type Quiz {
  questions: [QuizQuestion]
}

type QuizQuestion {
  type: String
  question: String
  options: [MultipleChoiceOption]
  correctAnswerId: ID
}

type RenderableText {
  markdown: String
}

type Scripture {
  id: ID
  text: String
  link: String
}

type ScriptureGroup {
  id: ID
  title: String
  scriptures: [Scripture]
}

input ScriptureGroupInput {
  id: ID!
  title: String
  scriptures: [ScriptureInput]
}

input ScriptureInput {
  id: ID!
  text: String
  link: String
}

type Teach {
  instruction: RenderableText
  pointsToTeach: RenderableText
}

type UserProfile {
  id: ID
  gender: Gender
  firstName: String
  lastName: String
  email: String
  principleStatuses: [PrincipleStatus]
}

type VideoRef {
  id: ID
  title: String
  link: String
}

input VideoRefInput {
  id: ID!
  title: String
  link: String
}

schema {
  query: Query
  mutation: Mutation
}
